// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/repositories/api.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entities "order-pack-calculator/internal/domain/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPackSizeRepository is a mock of PackSizeRepository interface.
type MockPackSizeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPackSizeRepositoryMockRecorder
}

// MockPackSizeRepositoryMockRecorder is the mock recorder for MockPackSizeRepository.
type MockPackSizeRepositoryMockRecorder struct {
	mock *MockPackSizeRepository
}

// NewMockPackSizeRepository creates a new mock instance.
func NewMockPackSizeRepository(ctrl *gomock.Controller) *MockPackSizeRepository {
	mock := &MockPackSizeRepository{ctrl: ctrl}
	mock.recorder = &MockPackSizeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackSizeRepository) EXPECT() *MockPackSizeRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPackSizeRepository) Create(ctx context.Context, pack entities.PackSize) (*entities.PackSize, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, pack)
	ret0, _ := ret[0].(*entities.PackSize)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPackSizeRepositoryMockRecorder) Create(ctx, pack interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPackSizeRepository)(nil).Create), ctx, pack)
}

// GetAll mocks base method.
func (m *MockPackSizeRepository) GetAll(ctx context.Context) ([]entities.PackSize, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]entities.PackSize)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockPackSizeRepositoryMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPackSizeRepository)(nil).GetAll), ctx)
}

// GetByID mocks base method.
func (m *MockPackSizeRepository) GetByID(ctx context.Context, ID int64) (*entities.PackSize, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, ID)
	ret0, _ := ret[0].(*entities.PackSize)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPackSizeRepositoryMockRecorder) GetByID(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPackSizeRepository)(nil).GetByID), ctx, ID)
}

// GetSizesByProductID mocks base method.
func (m *MockPackSizeRepository) GetSizesByProductID(ctx context.Context, productID int64) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSizesByProductID", ctx, productID)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSizesByProductID indicates an expected call of GetSizesByProductID.
func (mr *MockPackSizeRepositoryMockRecorder) GetSizesByProductID(ctx, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSizesByProductID", reflect.TypeOf((*MockPackSizeRepository)(nil).GetSizesByProductID), ctx, productID)
}

// Update mocks base method.
func (m *MockPackSizeRepository) Update(ctx context.Context, pack entities.PackSize) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, pack)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPackSizeRepositoryMockRecorder) Update(ctx, pack interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPackSizeRepository)(nil).Update), ctx, pack)
}
