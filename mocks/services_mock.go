// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/services/api.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	dto "order-pack-calculator/internal/domain/dto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPackSizeService is a mock of PackSizeService interface.
type MockPackSizeService struct {
	ctrl     *gomock.Controller
	recorder *MockPackSizeServiceMockRecorder
}

// MockPackSizeServiceMockRecorder is the mock recorder for MockPackSizeService.
type MockPackSizeServiceMockRecorder struct {
	mock *MockPackSizeService
}

// NewMockPackSizeService creates a new mock instance.
func NewMockPackSizeService(ctrl *gomock.Controller) *MockPackSizeService {
	mock := &MockPackSizeService{ctrl: ctrl}
	mock.recorder = &MockPackSizeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackSizeService) EXPECT() *MockPackSizeServiceMockRecorder {
	return m.recorder
}

// CalcOptimalPacks mocks base method.
func (m *MockPackSizeService) CalcOptimalPacks(arg0 context.Context, arg1 dto.CalculatePackSizesRequest) (*dto.OptimalPackSizesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalcOptimalPacks", arg0, arg1)
	ret0, _ := ret[0].(*dto.OptimalPackSizesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalcOptimalPacks indicates an expected call of CalcOptimalPacks.
func (mr *MockPackSizeServiceMockRecorder) CalcOptimalPacks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalcOptimalPacks", reflect.TypeOf((*MockPackSizeService)(nil).CalcOptimalPacks), arg0, arg1)
}

// Create mocks base method.
func (m *MockPackSizeService) Create(arg0 context.Context, arg1 dto.CreatePackSizeRequest) (*dto.PackSizeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*dto.PackSizeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPackSizeServiceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPackSizeService)(nil).Create), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockPackSizeService) GetAll(ctx context.Context) ([]dto.PackSizeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]dto.PackSizeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockPackSizeServiceMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPackSizeService)(nil).GetAll), ctx)
}

// Update mocks base method.
func (m *MockPackSizeService) Update(arg0 context.Context, arg1 dto.UpdatePackSizeRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPackSizeServiceMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPackSizeService)(nil).Update), arg0, arg1)
}
